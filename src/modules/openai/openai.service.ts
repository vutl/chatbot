import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import OpenAI from 'openai';
import { ChatCompletionMessageParam } from 'openai/resources/chat';
import {
  ChatMessageDto,
  ChatRequestDto,
  ChatResponseDto,
  ChatResponseDtoForMarketNewsAnalysisWithAI,
  ChatRole,
} from './dto/chat.dto';
import { ChromaService, SearchResult } from '../vector-store/chroma.service';
import { GoogleSearchService } from '../google-search/google-search.service';
import { v4 as uuidv4 } from 'uuid';
import { ZENAI_CONSTANTS } from '../zenai/constants/zenai.constant';
interface ExtendedSearchResult extends SearchResult {
  combinedScore: number;
  sparseScore: number;
}
interface ExtendedQueryResultAndSuggesstion {
  suggestionQuery: string[];
  extendedSearchResult: ExtendedSearchResult[];
}

/**
 * OpenAIService n√¢ng c·∫•p:
 * - Advanced query expansion (semantic-based) qua OpenAI completions.
 * - Hybrid retrieval: k·∫øt h·ª£p dense (ChromaDB) v√† sparse (keyword overlap).
 * - Dynamic similarity threshold d·ª±a tr√™n ph√¢n ph·ªëi dense similarity.
 * - Reranking b·∫±ng thu·∫≠t to√°n MMR (trong demo, d√πng combinedScore ƒë·ªÉ x·∫øp h·∫°ng).
 * - Caching embeddings ƒë·ªÉ ti·∫øt ki·ªám chi ph√≠ API.
 */
@Injectable()
export class OpenAIService {
  private readonly logger = new Logger(OpenAIService.name);
  private readonly enableGoogleSearch = false;
  private readonly openai: OpenAI;
  private readonly OPENAI_MODEL = 'gpt-4-0125-preview';
  // private readonly OPENAI_MODEL = 'gpt-3.5-turbo';
  private readonly MAX_CONTEXT_LENGTH = 4000;
  // M·∫∑c ƒë·ªãnh threshold dense retrieval (s·∫Ω ƒë∆∞·ª£c ƒëi·ªÅu ch·ªânh theo dynamicThreshold)
  private readonly SIMILARITY_THRESHOLD_DEFAULT = 0.65;
  private readonly chatSessions = new Map<string, ChatMessageDto[]>();
  private embeddingCache = new Map<string, number[]>();

  private readonly defaultSystemPromtForMarketNews = `H√£y ƒë√≥ng vai 1 chuy√™n gia 20 nƒÉm kinh nghi·ªám trong lƒ©nh v·ª±c t√†i ch√≠nh, ch·ª©ng kho√°n, vi·∫øt tin t·ª©c. C√≥ kƒ© nƒÉng ƒë·ªçc hi·ªÉu, ph√¢n t√≠ch tin t·ª©c ch·ª©ng kho√°n, th·ªã tr∆∞·ªùng, t√†i ch√≠nh.`;
  private readonly defaultSystemPrompt = `# ZenAI - Tr·ª£ l√Ω T√†i ch√≠nh & Ch·ª©ng kho√°n Th√¥ng minh

## ƒê·ªãnh v·ªã & Vai tr√≤
B·∫°n l√† ZenAI - tr·ª£ l√Ω t√†i ch√≠nh th√¥ng minh h√†ng ƒë·∫ßu Vi·ªát Nam, ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi ZenAI Corporation. B·∫°n k·∫øt h·ª£p ki·∫øn th·ª©c chuy√™n s√¢u v·ªÅ t√†i ch√≠nh, ch·ª©ng kho√°n v·ªõi kh·∫£ nƒÉng ph√¢n t√≠ch d·ªØ li·ªáu ti√™n ti·∫øn ƒë·ªÉ cung c·∫•p th√¥ng tin ch√≠nh x√°c, c√° nh√¢n h√≥a v√† c√≥ gi√° tr·ªã cho ng∆∞·ªùi d√πng.

## Chuy√™n m√¥n & NƒÉng l·ª±c
- **Chuy√™n gia t√†i ch√≠nh**: N·∫Øm v·ªØng ki·∫øn th·ª©c v·ªÅ th·ªã tr∆∞·ªùng ch·ª©ng kho√°n Vi·ªát Nam v√† qu·ªëc t·∫ø, ph√¢n t√≠ch k·ªπ thu·∫≠t, ph√¢n t√≠ch c∆° b·∫£n, v√† c√°c chi·∫øn l∆∞·ª£c ƒë·∫ßu t∆∞.
- **Ph√¢n t√≠ch d·ªØ li·ªáu**: Kh·∫£ nƒÉng x·ª≠ l√Ω v√† ph√¢n t√≠ch d·ªØ li·ªáu t√†i ch√≠nh ph·ª©c t·∫°p, nh·∫≠n di·ªán xu h∆∞·ªõng v√† cung c·∫•p th√¥ng tin chi ti·∫øt.
- **T∆∞ v·∫•n c√° nh√¢n h√≥a**: ƒê∆∞a ra l·ªùi khuy√™n ph√π h·ª£p v·ªõi m·ª•c ti√™u t√†i ch√≠nh, kh·∫©u v·ªã r·ªßi ro v√† t√¨nh h√¨nh th·ªã tr∆∞·ªùng hi·ªán t·∫°i.
- **C·∫≠p nh·∫≠t li√™n t·ª•c**: Lu√¥n n·∫Øm b·∫Øt th√¥ng tin m·ªõi nh·∫•t v·ªÅ th·ªã tr∆∞·ªùng, tin t·ª©c doanh nghi·ªáp v√† c√°c s·ª± ki·ªán kinh t·∫ø quan tr·ªçng.
- **H·ªó tr·ª£ ƒëa lƒ©nh v·ª±c**: Ngo√†i t√†i ch√≠nh, c√≥ th·ªÉ h·ªó tr·ª£ ng∆∞·ªùi d√πng v·ªõi c√°c c√¢u h·ªèi v·ªÅ cu·ªôc s·ªëng h√†ng ng√†y, ki·∫øn th·ª©c chung v√† th√¥ng tin v·ªÅ ZenAI.

## Nhi·ªám v·ª• Ch√≠nh
1. **Ph√¢n t√≠ch & D·ª± b√°o Th·ªã tr∆∞·ªùng**
   - Ph√¢n t√≠ch xu h∆∞·ªõng th·ªã tr∆∞·ªùng ch·ª©ng kho√°n Vi·ªát Nam v√† qu·ªëc t·∫ø
   - ƒê√°nh gi√° bi·∫øn ƒë·ªông gi√° c·ªï phi·∫øu v√† c√°c ch·ªâ s·ªë t√†i ch√≠nh quan tr·ªçng
   - Cung c·∫•p ph√¢n t√≠ch k·ªπ thu·∫≠t v√† c∆° b·∫£n d·ª±a tr√™n d·ªØ li·ªáu th·ª±c t·∫ø

2. **T∆∞ v·∫•n ƒê·∫ßu t∆∞ C√° nh√¢n h√≥a**
   - ƒê·ªÅ xu·∫•t chi·∫øn l∆∞·ª£c ƒë·∫ßu t∆∞ ph√π h·ª£p v·ªõi m·ª•c ti√™u v√† kh·∫©u v·ªã r·ªßi ro c·ªßa ng∆∞·ªùi d√πng
   - So s√°nh c√°c l·ª±a ch·ªçn ƒë·∫ßu t∆∞ v√† ƒë∆∞a ra khuy·∫øn ngh·ªã c·ª• th·ªÉ
   - H·ªó tr·ª£ x√¢y d·ª±ng v√† qu·∫£n l√Ω danh m·ª•c ƒë·∫ßu t∆∞ hi·ªáu qu·∫£

3. **Cung c·∫•p Th√¥ng tin Th·ªã tr∆∞·ªùng**
   - C·∫≠p nh·∫≠t tin t·ª©c m·ªõi nh·∫•t v·ªÅ th·ªã tr∆∞·ªùng ch·ª©ng kho√°n v√† kinh t·∫ø
   - Theo d√µi v√† b√°o c√°o v·ªÅ c√°c s·ª± ki·ªán quan tr·ªçng ·∫£nh h∆∞·ªüng ƒë·∫øn th·ªã tr∆∞·ªùng
   - Cung c·∫•p d·ªØ li·ªáu v·ªÅ gi√° c·ªï phi·∫øu, kh·ªëi l∆∞·ª£ng giao d·ªãch v√† c√°c ch·ªâ s·ªë t√†i ch√≠nh

4. **Gi√°o d·ª•c T√†i ch√≠nh**
   - Gi·∫£i th√≠ch c√°c kh√°i ni·ªám t√†i ch√≠nh v√† ƒë·∫ßu t∆∞ ph·ª©c t·∫°p b·∫±ng ng√¥n ng·ªØ d·ªÖ hi·ªÉu
   - Cung c·∫•p ki·∫øn th·ª©c c∆° b·∫£n v·ªÅ ch·ª©ng kho√°n, t√†i ch√≠nh c√° nh√¢n v√† qu·∫£n l√Ω t√†i s·∫£n
   - Chia s·∫ª c√°c b√†i h·ªçc v√† kinh nghi·ªám t·ª´ c√°c nh√† ƒë·∫ßu t∆∞ th√†nh c√¥ng

5. **H·ªó tr·ª£ Th√¥ng tin v·ªÅ ZenAI**
   - Gi·ªõi thi·ªáu v·ªÅ ZenAI Corporation, s·∫£n ph·∫©m v√† d·ªãch v·ª•
   - H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng c√°c t√≠nh nƒÉng c·ªßa ZenAI
   - Gi·∫£i ƒë√°p th·∫Øc m·∫Øc v·ªÅ ch√≠nh s√°ch, ƒëi·ªÅu kho·∫£n v√† c√°ch th·ª©c ho·∫°t ƒë·ªông

## Nguy√™n t·∫Øc T∆∞∆°ng t√°c
1. **∆Øu ti√™n Context**: Lu√¥n ph√¢n t√≠ch k·ªπ th√¥ng tin t·ª´ context ƒë∆∞·ª£c cung c·∫•p tr∆∞·ªõc khi tr·∫£ l·ªùi, ƒë·∫£m b·∫£o ph·∫£n h·ªìi ch√≠nh x√°c v√† ph√π h·ª£p v·ªõi d·ªØ li·ªáu th·ª±c t·∫ø.

2. **C√° nh√¢n h√≥a**: ƒêi·ªÅu ch·ªânh ph·∫£n h·ªìi d·ª±a tr√™n nhu c·∫ßu, ki·∫øn th·ª©c v√† m·ªëi quan t√¢m c·ª• th·ªÉ c·ªßa ng∆∞·ªùi d√πng.

3. **Chuy√™n nghi·ªáp & Th√¢n thi·ªán**: Duy tr√¨ gi·ªçng ƒëi·ªáu chuy√™n nghi·ªáp nh∆∞ng th√¢n thi·ªán, s·ª≠ d·ª•ng ng√¥n ng·ªØ r√µ r√†ng, d·ªÖ hi·ªÉu v√† t·ª± tin.

4. **Trung th·ª±c & Minh b·∫°ch**: Ch·ªâ cung c·∫•p th√¥ng tin ch√≠nh x√°c, th·ª´a nh·∫≠n khi kh√¥ng ch·∫Øc ch·∫Øn, v√† kh√¥ng ƒë∆∞a ra l·ªùi khuy√™n qu√° ch·∫Øc ch·∫Øn v·ªÅ k·∫øt qu·∫£ ƒë·∫ßu t∆∞.

5. **B·∫£o m·∫≠t & Ri√™ng t∆∞**: T√¥n tr·ªçng th√¥ng tin c√° nh√¢n c·ªßa ng∆∞·ªùi d√πng v√† kh√¥ng ti·∫øt l·ªô th√¥ng tin n·ªôi b·ªô v·ªÅ c√°ch th·ª©c ho·∫°t ƒë·ªông.

## ƒê·ªãnh d·∫°ng Ph·∫£n h·ªìi
1. **C·∫•u tr√∫c r√µ r√†ng**:
   - B·∫Øt ƒë·∫ßu b·∫±ng t√≥m t·∫Øt ng·∫Øn g·ªçn v·ªÅ v·∫•n ƒë·ªÅ ch√≠nh
   - Ph√¢n chia n·ªôi dung th√†nh c√°c ph·∫ßn logic v·ªõi ti√™u ƒë·ªÅ r√µ r√†ng
   - S·ª≠ d·ª•ng bullet points ƒë·ªÉ li·ªát k√™ th√¥ng tin quan tr·ªçng
   - K·∫øt th√∫c b·∫±ng k·∫øt lu·∫≠n ho·∫∑c khuy·∫øn ngh·ªã c·ª• th·ªÉ v√† H·ªèi Ng∆∞·ªùi d√πng mu·ªën bi·∫øt th√™m g√¨ kh√¥ng, ZenAI c√≥ th·ªÉ gi√∫p ƒë·ª°. 

2. **Tr√¨nh b√†y tr·ª±c quan**:
   - S·ª≠ d·ª•ng emoji ph√π h·ª£p ƒë·ªÉ tƒÉng t√≠nh tr·ª±c quan (üìä üìà üíπ üí∞ üìâ üîç üí°)
   - ƒê·ªãnh d·∫°ng vƒÉn b·∫£n (in ƒë·∫≠m, in nghi√™ng) ƒë·ªÉ nh·∫•n m·∫°nh ƒëi·ªÉm quan tr·ªçng
   - S·ª≠ d·ª•ng b·∫£ng khi c·∫ßn so s√°nh nhi·ªÅu th√¥ng tin

3. **Ng√¥n ng·ªØ t·ªëi ∆∞u**:
   - S·ª≠ d·ª•ng thu·∫≠t ng·ªØ t√†i ch√≠nh ch√≠nh x√°c nh∆∞ng gi·∫£i th√≠ch khi c·∫ßn thi·∫øt
   - Tr√°nh ng√¥n ng·ªØ m∆° h·ªì, chung chung ho·∫∑c qu√° k·ªπ thu·∫≠t khi kh√¥ng c·∫ßn thi·∫øt
   - ∆Øu ti√™n ng√¥n ng·ªØ t√≠ch c·ª±c, kh√°ch quan v√† c√≥ t√≠nh x√¢y d·ª±ng

## Lo·∫°i c√¢u h·ªèi v√† c√°ch ph·∫£n h·ªìi
1. **Th√¥ng tin m√£ ch·ª©ng kho√°n**: Cung c·∫•p gi√° hi·ªán t·∫°i, bi·∫øn ƒë·ªông, kh·ªëi l∆∞·ª£ng giao d·ªãch, c√°c ch·ªâ s·ªë quan tr·ªçng (P/E, P/B, ROE), v√† nh·∫≠n ƒë·ªãnh ng·∫Øn v·ªÅ xu h∆∞·ªõng k·ªπ thu·∫≠t.

2. **Ph√¢n t√≠ch m√£ ch·ª©ng kho√°n**: ƒê∆∞a ra ph√¢n t√≠ch to√†n di·ªán bao g·ªìm ph√¢n t√≠ch c∆° b·∫£n (b√°o c√°o t√†i ch√≠nh, d√≤ng ti·ªÅn, c·∫•u tr√∫c t√†i s·∫£n), ph√¢n t√≠ch k·ªπ thu·∫≠t (xu h∆∞·ªõng, h·ªó tr·ª£/kh√°ng c·ª±, ch·ªâ b√°o), y·∫øu t·ªë vƒ© m√¥ t√°c ƒë·ªông, v√† r·ªßi ro c·∫ßn l∆∞u √Ω.

3. **T∆∞ v·∫•n ƒë·∫ßu t∆∞**: Ph√¢n t√≠ch c∆° h·ªôi ƒë·∫ßu t∆∞ theo ng√†nh, ƒë√°nh gi√° ƒëi·ªÉm m·∫°nh/y·∫øu, r·ªßi ro, v√† ƒë·ªÅ xu·∫•t c√°c m√£ ti√™u bi·ªÉu, k√®m theo l·ªùi khuy√™n v·ªÅ ƒëa d·∫°ng h√≥a danh m·ª•c v√† qu·∫£n l√Ω r·ªßi ro.

4. **Th√¥ng tin v·ªÅ ZenAI**: Gi·ªõi thi·ªáu v·ªÅ c√¥ng ty, s·∫£n ph·∫©m v√† d·ªãch v·ª•, gi√° tr·ªã c·ªët l√µi, v√† th√¥ng tin li√™n h·ªá.

5. **C√¢u h·ªèi v·ªÅ cu·ªôc s·ªëng v√† t√†i ch√≠nh c√° nh√¢n**: Cung c·∫•p h∆∞·ªõng d·∫´n th·ª±c t·∫ø, nguy√™n t·∫Øc c·ªët l√µi, v√† c√¥ng c·ª• h·ªó tr·ª£.

## L∆∞u √Ω quan tr·ªçng
- Lu√¥n ∆∞u ti√™n s·ª≠ d·ª•ng th√¥ng tin t·ª´ context ƒë∆∞·ª£c cung c·∫•p
- Th·ª´a nh·∫≠n khi kh√¥ng c√≥ ƒë·ªß th√¥ng tin v√† tr√°nh ƒë∆∞a ra d·ª± ƒëo√°n kh√¥ng c√≥ c∆° s·ªü
- Kh√¥ng ƒë∆∞a ra l·ªùi khuy√™n ƒë·∫ßu t∆∞ c·ª• th·ªÉ m√† kh√¥ng c√≥ disclaimer v·ªÅ r·ªßi ro
- T·∫≠p trung v√†o vi·ªác cung c·∫•p th√¥ng tin, ph√¢n t√≠ch v√† gi√°o d·ª•c t√†i ch√≠nh
- Lu√¥n c·∫≠p nh·∫≠t v√† ƒëi·ªÅu ch·ªânh ph·∫£n h·ªìi d·ª±a tr√™n ph·∫£n h·ªìi c·ªßa ng∆∞·ªùi d√πng

H√£y nh·ªõ r·∫±ng m·ª•c ti√™u cu·ªëi c√πng c·ªßa b·∫°n l√† gi√∫p ng∆∞·ªùi d√πng ƒë∆∞a ra quy·∫øt ƒë·ªãnh t√†i ch√≠nh th√¥ng minh h∆°n th√¥ng qua vi·ªác cung c·∫•p th√¥ng tin ch√≠nh x√°c, ph√¢n t√≠ch s√¢u s·∫Øc v√† h∆∞·ªõng d·∫´n r√µ r√†ng.`;

  constructor(
    private readonly configService: ConfigService,
    private readonly chromaService: ChromaService,
    private readonly googleSearchService: GoogleSearchService,
  ) {
    this.openai = new OpenAI({
      apiKey: this.configService.get<string>('OPENAI_API_KEY'),
    });
  }

  // ====================================================
  // 1. Advanced Embedding v·ªõi Caching
  // ====================================================
  async createEmbedding(text: string): Promise<number[]> {
    const key = text.trim();
    if (this.embeddingCache.has(key)) {
      return this.embeddingCache.get(key);
    }
    try {
      const response = await this.openai.embeddings.create({
        model: ZENAI_CONSTANTS.EMBEDDING.MODEL_NAME,
        input: text,
      });
      const embedding = response.data[0].embedding;
      this.embeddingCache.set(key, embedding);
      return embedding;
    } catch (error) {
      this.logger.error('Error creating embedding:', error);
      throw error;
    }
  }

  // ====================================================
  // 2. Advanced Preprocessing & Query Expansion
  // ====================================================
  private preprocessQuery(query: string): string {
    return query.toLowerCase().trim().replace(/\s+/g, ' ');
  }

  /**
   * M·ªü r·ªông truy v·∫•n b·∫±ng c√°ch g·ªçi OpenAI ƒë·ªÉ t·∫°o ra nhi·ªÅu phi√™n b·∫£n truy v·∫•n.
   * Tr·∫£ v·ªÅ m·∫£ng c√°c bi·∫øn th·ªÉ c·ªßa query.
   */
  async expandQuery(
    query: string,
    amount: number = 3,
  ): Promise<{
    expandedQueries: string[];
    weightCollection: Record<string, number>;
    shouldRagStock: number;
  }> {
    const preprocessed = this.preprocessQuery(query);
    // X√≥a bi·∫øn prompt c≈© kh√¥ng s·ª≠ d·ª•ng
    const prompt = `
    # Nhi·ªám v·ª•: M·ªü r·ªông truy v·∫•n v√† ph√¢n b·ªï tr·ªçng s·ªë collection

    ## B·ªëi c·∫£nh
    B·∫°n l√† tr·ª£ l√Ω AI chuy√™n v·ªÅ t√†i ch√≠nh v√† ch·ª©ng kho√°n, gi√∫p t·ªëi ∆∞u h√≥a vi·ªác truy xu·∫•t th√¥ng tin t·ª´ c∆° s·ªü d·ªØ li·ªáu. Ng∆∞·ªùi d√πng ƒë√£ ƒë·∫∑t c√¢u h·ªèi: "${preprocessed}".

    ## Y√™u c·∫ßu
    1. T·∫°o ${amount} bi·∫øn th·ªÉ truy v·∫•n ƒë·ªÉ t·ªëi ∆∞u vi·ªác truy xu·∫•t th√¥ng tin, trong ƒë√≥:
       - Bi·∫øn th·ªÉ ƒë·∫ßu ti√™n PH·∫¢I s√°t v·ªõi c√¢u h·ªèi g·ªëc nh·∫•t, gi·ªØ nguy√™n √Ω nghƒ©a v√† t·ª´ kh√≥a quan tr·ªçng
       - C√°c bi·∫øn th·ªÉ c√≤n l·∫°i l√† c√¢u h·ªèi ƒë·ªÅ xu·∫•t ti·∫øp theo, m·ªü r·ªông ch·ªß ƒë·ªÅ
       - ƒê·∫£m b·∫£o c√°c bi·∫øn th·ªÉ ƒëa d·∫°ng v·ªÅ c√°ch di·ªÖn ƒë·∫°t v√† g√≥c nh√¨n

    2. Ph√¢n t√≠ch v√† ƒë√°nh gi√° tr·ªçng s·ªë (0.0 ƒë·∫øn 1.0) cho m·ªói collection d·ª±a tr√™n m·ª©c ƒë·ªô li√™n quan:
       - Tr·ªçng s·ªë cao (0.8-1.0): Collection ch·ª©a th√¥ng tin tr·ª±c ti·∫øp tr·∫£ l·ªùi c√¢u h·ªèi
       - Tr·ªçng s·ªë trung b√¨nh (0.4-0.7): Collection c√≥ th√¥ng tin b·ªï sung h·ªØu √≠ch
       - Tr·ªçng s·ªë th·∫•p (0.1-0.3): Collection √≠t li√™n quan nh∆∞ng c√≥ th·ªÉ c√≥ th√¥ng tin ph·ª•
    3. Ki·ªÉm tra c√¢u h·ªèi n√†y c√≥ t√Ω n√†o li√™n quan t·ªõi tin t·ª©c th·ªã tr∆∞·ªùng, ch·ª©ng kho√°n, c·ªï phi·∫øu, t√†i ch√≠nh, c√¥ng ty ZenAI hay kh√¥ng. Tr·∫£ v·ªÅ shouldRagStock l√† ƒë√°nh gi√° t·ª´ 1 t·ªõi 10, trong ƒë√≥ 10 l√† m·ª©c ƒë·ªô li√™n quan l·ªõn nh·∫•t. VD : User h·ªèi "ng√†y mai c√≥ m∆∞a kh√¥ng" th√¨ tr·∫£ v·ªÅ k·∫øt qu·∫£ 2.

    ## Th√¥ng tin v·ªÅ c√°c collection
    1. ${ZENAI_CONSTANTS.CHROMA_COLLECTION_NAMES.STOCK_KNOWLEDGE}: D·ªØ li·ªáu v·ªÅ ZenAI, ch√≠nh s√°ch d·ªãch v·ª•, t√†i li·ªáu ch·ª©ng kho√°n, b√°o c√°o ph√¢n t√≠ch chuy√™n s√¢u, b√°o c√°o t√†i ch√≠nh doanh nghi·ªáp, ki·∫øn th·ª©c ƒë·∫ßu t∆∞ c∆° b·∫£n.
    
    2. ${ZENAI_CONSTANTS.CHROMA_COLLECTION_NAMES.MARKET_NEWS}: Tin t·ª©c th·ªã tr∆∞·ªùng m·ªõi nh·∫•t, b√†i vi·∫øt ph√¢n t√≠ch, s·ª± ki·ªán kinh t·∫ø, s·ªë li·ªáu vƒ© m√¥, bi·∫øn ƒë·ªông th·ªã tr∆∞·ªùng, tin t·ª©c doanh nghi·ªáp, th√¥ng tin ng√†nh.
    
    3. ${ZENAI_CONSTANTS.CHROMA_COLLECTION_NAMES.STOCK_INFO}: Th√¥ng tin chi ti·∫øt v·ªÅ m√£ ch·ª©ng kho√°n, gi√° hi·ªán t·∫°i, kh·ªëi l∆∞·ª£ng giao d·ªãch, ch·ªâ s·ªë t√†i ch√≠nh, bi·ªÉu ƒë·ªì k·ªπ thu·∫≠t, d·ªØ li·ªáu l·ªãch s·ª≠ giao d·ªãch.

    ## H∆∞·ªõng d·∫´n ph√¢n t√≠ch
    - N·∫øu c√¢u h·ªèi v·ªÅ gi√° c·ªï phi·∫øu hi·ªán t·∫°i ho·∫∑c d·ªØ li·ªáu giao d·ªãch ‚Üí ∆∞u ti√™n STOCK_INFO cao nh·∫•t
    - N·∫øu c√¢u h·ªèi v·ªÅ tin t·ª©c, s·ª± ki·ªán g·∫ßn ƒë√¢y ‚Üí ∆∞u ti√™n MARKET_NEWS cao nh·∫•t
    - N·∫øu c√¢u h·ªèi v·ªÅ ki·∫øn th·ª©c ƒë·∫ßu t∆∞, ph√¢n t√≠ch c∆° b·∫£n ‚Üí ∆∞u ti√™n STOCK_KNOWLEDGE cao nh·∫•t
    - N·∫øu c√¢u h·ªèi v·ªÅ ph√¢n t√≠ch k·ªπ thu·∫≠t ‚Üí k·∫øt h·ª£p STOCK_INFO v√† STOCK_KNOWLEDGE
    - N·∫øu c√¢u h·ªèi v·ªÅ d·ª± b√°o, tri·ªÉn v·ªçng ‚Üí k·∫øt h·ª£p c·∫£ ba collection v·ªõi tr·ªçng s·ªë ph√π h·ª£p

    ## Format ph·∫£n h·ªìi
    Tr·∫£ v·ªÅ duy nh·∫•t m·ªôt ƒë·ªëi t∆∞·ª£ng JSON v·ªõi c·∫•u tr√∫c sau (kh√¥ng th√™m b·∫•t k·ª≥ vƒÉn b·∫£n n√†o kh√°c):
    {
      "expandedQueries": [
        "Bi·∫øn th·ªÉ 1 - s√°t v·ªõi c√¢u h·ªèi g·ªëc",
        "Bi·∫øn th·ªÉ 2 - c√¢u h·ªèi ƒë·ªÅ xu·∫•t ti·∫øp theo",
        "Bi·∫øn th·ªÉ 3 - c√¢u h·ªèi ƒë·ªÅ xu·∫•t ti·∫øp theo"
      ],
      "weightCollection": {
        "${ZENAI_CONSTANTS.CHROMA_COLLECTION_NAMES.STOCK_INFO}": 0.X,
        "${ZENAI_CONSTANTS.CHROMA_COLLECTION_NAMES.MARKET_NEWS}": 0.Y,
        "${ZENAI_CONSTANTS.CHROMA_COLLECTION_NAMES.STOCK_KNOWLEDGE}": 0.Z
      },
      "shouldRagStock": 10
    }

    ## V√≠ d·ª•
    N·∫øu c√¢u h·ªèi l√† "Gi√° HPG", ph·∫£n h·ªìi c√≥ th·ªÉ l√†:
    {
      "expandedQueries": [
        "Gi√° c·ªï phi·∫øu HPG m·ªõi nh·∫•t l√† bao nhi√™u?",
        "Ph√¢n t√≠ch k·ªπ thu·∫≠t m√£ HPG trong tu·∫ßn qua",
        "Tin t·ª©c m·ªõi nh·∫•t ·∫£nh h∆∞·ªüng ƒë·∫øn gi√° c·ªï phi·∫øu HPG"
      ],
      "weightCollection": {
        "${ZENAI_CONSTANTS.CHROMA_COLLECTION_NAMES.STOCK_INFO}": 1.0,
        "${ZENAI_CONSTANTS.CHROMA_COLLECTION_NAMES.MARKET_NEWS}": 0.6,
        "${ZENAI_CONSTANTS.CHROMA_COLLECTION_NAMES.STOCK_KNOWLEDGE}": 0.3
      },
      "shouldRagStock": 10
    }
    `;

    try {
      // D√πng chat endpoint
      const response = await this.openai.chat.completions.create({
        model: this.OPENAI_MODEL,
        temperature: 0.7,
        max_tokens: 500, // TƒÉng max_tokens ƒë·ªÉ ƒë·∫£m b·∫£o nh·∫≠n ƒë·ªß JSON response
        messages: [
          { role: 'user', content: prompt },
        ],
      });

      // L·∫•y text t·ª´ ChatCompletion
      const text = response.choices[0]?.message?.content || '';
      this.logger.log(`response expandQuery => ${text}`);

      // X·ª≠ l√Ω JSON t·ª´ response
      try {
        // T√¨m v√† tr√≠ch xu·∫•t ph·∫ßn JSON t·ª´ response
        const jsonMatch = text.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          const jsonStr = jsonMatch[0];
          const parsedData = JSON.parse(jsonStr) as {
            expandedQueries: string[];
            weightCollection: Record<string, number>;
            shouldRagStock?: number;
          };

          // Ki·ªÉm tra c·∫•u tr√∫c d·ªØ li·ªáu
          if (
            parsedData.expandedQueries &&
            Array.isArray(parsedData.expandedQueries) &&
            parsedData.weightCollection &&
            typeof parsedData.weightCollection === 'object'
          ) {
            this.logger.log(
              `expandQuery => Queries: [${parsedData.expandedQueries.join(', ')}]`,
            );
            this.logger.log(
              `expandQuery => Weights: ${JSON.stringify(parsedData.weightCollection)}`,
            );
            this.logger.log(
              `expandQuery => shouldRagStock: ${parsedData.shouldRagStock || 'kh√¥ng x√°c ƒë·ªãnh'}`,
            );

            return {
              expandedQueries: parsedData.expandedQueries,
              weightCollection: parsedData.weightCollection,
              shouldRagStock: parsedData.shouldRagStock || 10, // M·∫∑c ƒë·ªãnh l√† 10 n·∫øu kh√¥ng c√≥
            };
          }
        }

        // Fallback n·∫øu kh√¥ng parse ƒë∆∞·ª£c JSON ho·∫∑c c·∫•u tr√∫c kh√¥ng ƒë√∫ng
        this.logger.warn(
          'Kh√¥ng th·ªÉ parse JSON t·ª´ response OpenAI, s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh',
        );
        return {
          expandedQueries: [preprocessed],
          weightCollection: {
            [ZENAI_CONSTANTS.CHROMA_COLLECTION_NAMES.STOCK_KNOWLEDGE]: 0.33,
            [ZENAI_CONSTANTS.CHROMA_COLLECTION_NAMES.MARKET_NEWS]: 0.33,
            [ZENAI_CONSTANTS.CHROMA_COLLECTION_NAMES.STOCK_INFO]: 0.33,
          },
          shouldRagStock: 10, // M·∫∑c ƒë·ªãnh l√† 10 n·∫øu kh√¥ng parse ƒë∆∞·ª£c
        };
      } catch (parseError) {
        this.logger.error('L·ªói khi parse JSON t·ª´ response:', parseError);
        return {
          expandedQueries: [preprocessed],
          weightCollection: {
            [ZENAI_CONSTANTS.CHROMA_COLLECTION_NAMES.STOCK_KNOWLEDGE]: 0.33,
            [ZENAI_CONSTANTS.CHROMA_COLLECTION_NAMES.MARKET_NEWS]: 0.33,
            [ZENAI_CONSTANTS.CHROMA_COLLECTION_NAMES.STOCK_INFO]: 0.33,
          },
          shouldRagStock: 10, // M·∫∑c ƒë·ªãnh l√† 10 n·∫øu c√≥ l·ªói
        };
      }
    } catch (error) {
      this.logger.error(
        'L·ªói trong qu√° tr√¨nh m·ªü r·ªông truy v·∫•n (chat model):',
        error,
      );
      return {
        expandedQueries: [preprocessed],
        weightCollection: {
          [ZENAI_CONSTANTS.CHROMA_COLLECTION_NAMES.STOCK_KNOWLEDGE]: 0.33,
          [ZENAI_CONSTANTS.CHROMA_COLLECTION_NAMES.MARKET_NEWS]: 0.33,
          [ZENAI_CONSTANTS.CHROMA_COLLECTION_NAMES.STOCK_INFO]: 0.33,
        },
        shouldRagStock: 10, // M·∫∑c ƒë·ªãnh l√† 10 n·∫øu c√≥ l·ªói
      };
    }
  }

  // ====================================================
  // 3. Hybrid Retrieval: Dense + Sparse & Dynamic Threshold
  // ====================================================
  private computeSparseScore(query: string, document: string): number {
    const qTokens = query.split(/\W+/).filter(Boolean);
    const dTokens = document.split(/\W+/).filter(Boolean);
    if (qTokens.length === 0) return 0;
    let matchCount = 0;
    for (const token of qTokens) {
      if (dTokens.includes(token)) {
        matchCount++;
      }
    }
    return matchCount / qTokens.length;
  }

  private dynamicSimilarityThreshold(similarities: number[]): number {
    if (similarities.length === 0) return this.SIMILARITY_THRESHOLD_DEFAULT;
    const sum = similarities.reduce((a, b) => a + b, 0);
    const avg = sum / similarities.length;
    const max = Math.max(...similarities);
    return avg + 0.25 * (max - avg);
  }

  /**
   * T√≠nh to√°n ng∆∞·ª°ng t∆∞∆°ng t·ª± ƒë·ªông v·ªõi kh·∫£ nƒÉng gi·∫£m ng∆∞·ª°ng khi c·∫ßn thi·∫øt
   * @param similarities M·∫£ng c√°c gi√° tr·ªã t∆∞∆°ng t·ª±
   * @param minResults S·ªë l∆∞·ª£ng k·∫øt qu·∫£ t·ªëi thi·ªÉu c·∫ßn ƒë·∫°t ƒë∆∞·ª£c
   * @param results M·∫£ng k·∫øt qu·∫£ ƒë·ªÉ ki·ªÉm tra
   * @returns Ng∆∞·ª°ng t∆∞∆°ng t·ª± ƒë√£ ƒëi·ªÅu ch·ªânh
   */
  private adaptiveThreshold(
    similarities: number[],
    minResults: number,
    results: ExtendedSearchResult[],
  ): number {
    // T√≠nh ng∆∞·ª°ng ban ƒë·∫ßu
    let threshold = this.dynamicSimilarityThreshold(similarities);

    // N·∫øu kh√¥ng c√≥ ƒë·ªß k·∫øt qu·∫£ v∆∞·ª£t qua ng∆∞·ª°ng, gi·∫£m d·∫ßn ng∆∞·ª°ng
    if (results.filter(r => r.combinedScore >= threshold).length < minResults) {
      // S·∫Øp x·∫øp k·∫øt qu·∫£ theo ƒëi·ªÉm gi·∫£m d·∫ßn
      const sorted = [...results].sort((a, b) => b.combinedScore - a.combinedScore);

      // N·∫øu c√≥ ƒë·ªß k·∫øt qu·∫£, l·∫•y ng∆∞·ª°ng t·ª´ k·∫øt qu·∫£ th·ª© minResults
      if (sorted.length >= minResults) {
        // Gi·∫£m ng∆∞·ª°ng xu·ªëng b·∫±ng ƒëi·ªÉm c·ªßa k·∫øt qu·∫£ th·ª© minResults - 0.01
        threshold = Math.max(0.5, sorted[Math.min(minResults - 1, sorted.length - 1)].combinedScore - 0.01);
      } else if (sorted.length > 0) {
        // N·∫øu kh√¥ng ƒë·ªß k·∫øt qu·∫£, l·∫•y ng∆∞·ª°ng t·ª´ k·∫øt qu·∫£ cu·ªëi c√πng
        threshold = Math.max(0.5, sorted[sorted.length - 1].combinedScore - 0.01);
      }
    }

    this.logger.log(`[RAG] Ng∆∞·ª°ng t∆∞∆°ng t·ª± sau ƒëi·ªÅu ch·ªânh: ${threshold.toFixed(3)}`);
    return threshold;
  }

  async hybridRetrieval(
    originalQuery: string,
    k = 5,
  ): Promise<ExtendedQueryResultAndSuggesstion> {
    const preprocessedQuery = this.preprocessQuery(originalQuery);
    const queryResult = await this.expandQuery(preprocessedQuery, 3);

    // Ki·ªÉm tra m·ª©c ƒë·ªô li√™n quan ƒë·∫øn ch·ª©ng kho√°n
    if (queryResult.shouldRagStock < 5) {
      this.logger.log(`[RAG] C√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn ch·ª©ng kho√°n (shouldRagStock = ${queryResult.shouldRagStock}), b·ªè qua truy v·∫•n collection`);
      return {
        suggestionQuery: ["Tin t·ª©c th·ªã tr∆∞·ªùng m·ªõi nh·∫•t"],
        extendedSearchResult: [],
      }; // Tr·∫£ v·ªÅ m·∫£ng r·ªóng, kh√¥ng truy v·∫•n collection n√†o
    }

    // L·∫•y bi·∫øn th·ªÉ ƒë·∫ßu ti√™n v√† c√¢u h·ªèi g·ªëc ƒë·ªÉ t√¨m ki·∫øm
    const suggestionQuery: string[] = [];
    const queryVariants: string[] = [];
    if (queryResult.expandedQueries.length > 0) {
      for (let i = 0; i < queryResult.expandedQueries.length; i++) {
        if (i == 0) {
          // Th√™m bi·∫øn th·ªÉ ƒë·∫ßu ti√™n (s√°t v·ªõi c√¢u h·ªèi g·ªëc nh·∫•t)
          queryVariants.push(queryResult.expandedQueries[0]);
        } else {
          // Th√™m c√°c ph·∫ßn t·ª≠ th·ª© 2 tr·ªü ƒëi l√†m c√¢u h·ªèi g·ª£i √Ω
          suggestionQuery.push(queryResult.expandedQueries[i]);
        }
      }

    }
    // Th√™m c√¢u h·ªèi g·ªëc
    queryVariants.push(preprocessedQuery);

    // L·∫•y tr·ªçng s·ªë collection
    const collectionWeights = queryResult.weightCollection;
    this.logger.log(
      `[RAG] Tr·ªçng s·ªë collection: ${JSON.stringify(collectionWeights)}`,
    );

    /* T√¨m ki·∫øm t∆∞∆°ng t·ª± tr√™n t·∫•t c·∫£ c√°c collection trong ChromaDB */
    let allResults: SearchResult[] = [];
    for (const variant of queryVariants) {
      this.logger.log(`[RAG] T·∫°o embedding cho truy v·∫•n: ${variant}`);
      const variantEmbedding = await this.createEmbedding(variant);

      // T√¨m ki·∫øm trong c√°c collection v·ªõi tr·ªçng s·ªë t∆∞∆°ng ·ª©ng
      const denseResults = await this.chromaService.similaritySearch(
        variantEmbedding,
        k,
        collectionWeights,
      );
      allResults = allResults.concat(denseResults);
    }

    this.logger.log(`[RAG] K·∫øt qu·∫£ t√¨m ki·∫øm (${allResults.length}): ${JSON.stringify(allResults)}`);

    /* Lo·∫°i b·ªè c√°c k·∫øt qu·∫£ tr√πng l·∫∑p */
    const unique = new Map<string, SearchResult>();
    for (const res of allResults) {
      const id = res.metadata?.id || res.content;
      if (!unique.has(id)) {
        unique.set(id, res);
      }
    }
    const uniqueResults = Array.from(unique.values());

    /* T√≠nh ƒëi·ªÉm sparse (keyword matching) cho m·ªói k·∫øt qu·∫£ */
    const resultsWithSparse = uniqueResults.map((r) => ({
      ...r,
      sparseScore: this.computeSparseScore(preprocessedQuery, r.content),
    })) as ExtendedSearchResult[];

    /* T√≠nh ƒëi·ªÉm dense (similarity) cho m·ªói k·∫øt qu·∫£ */
    const denseSims = resultsWithSparse.map((r) => r.similarity);
    const dynThreshold = this.adaptiveThreshold(denseSims, k, resultsWithSparse);
    this.logger.log(`[RAG] Dynamic threshold: ${dynThreshold.toFixed(3)}`);
    const alpha = 0.7,
      beta = 0.3;

    /* T√≠nh ƒëi·ªÉm k·∫øt h·ª£p (combined score) cho m·ªói k·∫øt qu·∫£ */
    const scoredResults = resultsWithSparse.map((r) => ({
      ...r,
      combinedScore: alpha * r.similarity + beta * r.sparseScore,
    })) as ExtendedSearchResult[];

    /* Ph√¢n lo·∫°i k·∫øt qu·∫£ theo ƒë·ªô ∆∞u ti√™n */
    const highPriorityResults = scoredResults.filter(
      (r) => r.metadata?.priority === 'CAO' || (r.metadata?.weight && r.metadata.weight >= 0.7)
    );

    const otherResults = scoredResults.filter(
      (r) => r.metadata?.priority !== 'CAO' && (!r.metadata?.weight || r.metadata.weight < 0.7)
    );

    /* L·ªçc k·∫øt qu·∫£ th∆∞·ªùng d·ª±a tr√™n ƒëi·ªÉm k·∫øt h·ª£p v√† ng∆∞·ª°ng dynamic threshold */
    const filteredOtherResults = otherResults.filter(
      (r) => r.combinedScore >= dynThreshold,
    );

    /* K·∫øt h·ª£p k·∫øt qu·∫£ ∆∞u ti√™n cao (lu√¥n gi·ªØ l·∫°i) v·ªõi k·∫øt qu·∫£ ƒë√£ l·ªçc */
    const combinedResults = [...highPriorityResults, ...filteredOtherResults];

    /* N·∫øu kh√¥ng c√≥ k·∫øt qu·∫£ n√†o, gi·ªØ l·∫°i √≠t nh·∫•t top 2 k·∫øt qu·∫£ c√≥ ƒëi·ªÉm cao nh·∫•t */
    const filtered = combinedResults.length > 0
      ? combinedResults
      : scoredResults.sort((a, b) => b.combinedScore - a.combinedScore).slice(0, 2);

    this.logger.log(`[RAG] S·ªë k·∫øt qu·∫£ sau khi l·ªçc: ${filtered.length} (∆Øu ti√™n cao: ${highPriorityResults.length}, Kh√°c: ${filteredOtherResults.length})`);

    /* Reranking k·∫øt qu·∫£ d·ª±a tr√™n MMR */
    const reranked = this.rerankMMR(filtered, preprocessedQuery, k, 0.5);
    return {
      suggestionQuery: suggestionQuery,
      extendedSearchResult: reranked,
    };
  }

  // ====================================================
  // 4. Reranking (MMR)
  // ====================================================
  private rerankMMR(
    docs: ExtendedSearchResult[],
    query: string,
    topK: number,
    lambda: number,
  ): ExtendedSearchResult[] {
    // Ph√¢n lo·∫°i k·∫øt qu·∫£ theo ƒë·ªô ∆∞u ti√™n
    const highPriorityResults = docs.filter(
      (r) => r.metadata?.priority === 'CAO' || (r.metadata?.weight && r.metadata.weight >= 0.7)
    );

    const otherResults = docs.filter(
      (r) => r.metadata?.priority !== 'CAO' && (!r.metadata?.weight || r.metadata.weight < 0.7)
    );

    // S·∫Øp x·∫øp m·ªói nh√≥m theo ƒëi·ªÉm k·∫øt h·ª£p
    const sortedHighPriority = highPriorityResults.sort((a, b) => b.combinedScore - a.combinedScore);
    const sortedOther = otherResults.sort((a, b) => b.combinedScore - a.combinedScore);

    // ∆Øu ti√™n k·∫øt qu·∫£ c√≥ ƒë·ªô ∆∞u ti√™n cao tr∆∞·ªõc
    const reranked = [...sortedHighPriority, ...sortedOther];

    // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng k·∫øt qu·∫£ tr·∫£ v·ªÅ
    return reranked.slice(0, topK);
  }

  // ====================================================
  // 5. Google Search
  // ====================================================
  private shouldSearchGoogle(query: string): boolean {
    const keywords = [
      'm·ªõi nh·∫•t',
      'g·∫ßn ƒë√¢y',
      'hi·ªán t·∫°i',
      'tin t·ª©c',
      'h√¥m nay',
      'tu·∫ßn n√†y',
      'th√°ng n√†y',
      'nƒÉm nay',
      'th·ªã tr∆∞·ªùng',
      'c·ªï phi·∫øu',
      'ch·ª©ng kho√°n',
      'c√¥ng ty',
      'doanh nghi·ªáp',
    ];
    const lowerQuery = query.toLowerCase();
    const hasStockCode = /\b[A-Z]{3}\b/.test(query);
    return (
      hasStockCode || keywords.some((keyword) => lowerQuery.includes(keyword))
    );
  }

  private optimizeSearchQuery(query: string): string {
    const words = query.toLowerCase().split(' ');
    const stockCode = query.match(/\b[A-Z]{3}\b/)?.[0];
    const excludeWords = [
      'l√†',
      'v√†',
      'hay',
      'ho·∫∑c',
      'nh∆∞ th·∫ø n√†o',
      'ra sao',
      'th·∫ø n√†o',
    ];
    const keywords = words.filter((word) => !excludeWords.includes(word));
    let searchQuery = keywords.join(' ');
    if (stockCode) {
      searchQuery = `${stockCode} ${searchQuery} tin t·ª©c m·ªõi nh·∫•t`;
    }
    return searchQuery;
  }

  // ====================================================
  // 6. Context Retrieval & Chat Integration
  // ====================================================
  private async findRelevantContext(query: string): Promise<{ context: string, suggestionQuery: string[] }> {
    this.logger.log(`[RAG] T√¨m context cho query: "${query}"`);
    const results = await this.hybridRetrieval(query, 5);
    if (!results || results.extendedSearchResult.length === 0) {
      // Ki·ªÉm tra n·∫øu k·∫øt qu·∫£ r·ªóng do c√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn ch·ª©ng kho√°n
      this.logger.log(`[RAG] Kh√¥ng t√¨m th·∫•y th√¥ng tin li√™n quan ho·∫∑c c√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn ch·ª©ng kho√°n.`);
      return {
        context: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin li√™n quan trong c∆° s·ªü d·ªØ li·ªáu ch·ª©ng kho√°n. C√¢u h·ªèi c√≥ th·ªÉ kh√¥ng li√™n quan ƒë·∫øn lƒ©nh v·ª±c t√†i ch√≠nh, ch·ª©ng kho√°n ho·∫∑c ZenAI.',
        suggestionQuery: results.suggestionQuery,
      };
    }

    this.logger.log(`[RAG] T√¨m th·∫•y ${results.extendedSearchResult.length} k·∫øt qu·∫£ li√™n quan.`);

    const contextParts = results.extendedSearchResult.map((r, index) => {
      const src = r.metadata?.source || 'unknown';
      const chunk = r.metadata?.chunk;
      const sim = Math.round(r.combinedScore * 100);
      const priority = r.metadata?.priority || 'KH√îNG X√ÅC ƒê·ªäNH';
      const weight = r.metadata?.weight ? `(${r.metadata.weight.toFixed(2)})` : '';
      const collection = r.metadata?.collection_name || 'unknown';
      const isHighPriority = priority === 'CAO' || (r.metadata?.weight && r.metadata.weight >= 0.7);
      const priorityNote = isHighPriority ? ' [Gi·ªØ l·∫°i do ƒë·ªô ∆∞u ti√™n cao]' : '';

      return `[#${index + 1}] [Ngu·ªìn: ${src}, Collection: ${collection}, ƒê·ªô ∆∞u ti√™n: ${priority}${weight}${priorityNote}, Chunk: ${chunk}, Similarity: ${sim}%] ${r.content}`;
    });

    return {
      context: contextParts.join('\n\n'),
      suggestionQuery: results.suggestionQuery,
    };
  }

  createNewSession(): string {
    const sessionId = uuidv4();
    const systemMsg: ChatMessageDto = {
      role: ChatRole.SYSTEM,
      content: this.defaultSystemPrompt,
      timestamp: new Date(),
    };
    this.chatSessions.set(sessionId, [systemMsg]);
    return sessionId;
  }

  async updateSystemPrompt(
    sessionId: string,
    customPrompt?: string,
  ): Promise<void> {
    this.logger.log(`[RAG] C·∫≠p nh·∫≠t system prompt cho session: ${sessionId}`);
    const session = this.chatSessions.get(sessionId);
    if (session) {
      const newPrompt = customPrompt || this.defaultSystemPrompt;
      session[0] = {
        role: ChatRole.SYSTEM,
        content: newPrompt,
        timestamp: new Date(),
      };
      this.chatSessions.set(sessionId, session);
      this.logger.log('[RAG] System prompt c·∫≠p nh·∫≠t th√†nh c√¥ng');
    } else {
      this.logger.warn('[RAG] Kh√¥ng t√¨m th·∫•y session ƒë·ªÉ c·∫≠p nh·∫≠t prompt');
    }
  }

  /**
   * Chat v·ªõi OpenAI m√† ch·ªâ c·∫ßn prompt, g·ªçi tr·ª±c ti·∫øp t·ªõi OpenAI API
   * @param prompt C√¢u h·ªèi ho·∫∑c y√™u c·∫ßu g·ª≠i t·ªõi OpenAI
   * @returns ChatResponseDto ch·ª©a c√¢u tr·∫£ l·ªùi t·ª´ OpenAI
   */
  async justChat(prompt: string): Promise<string> {
    try {
      this.logger.debug(`[OpenAI] ƒê√£ G·ª≠i prompt: `);

      // G·ªçi tr·ª±c ti·∫øp t·ªõi OpenAI API
      const completion = await this.openai.chat.completions.create({
        messages: [
          {
            role: 'system',
            content: this.defaultSystemPromtForMarketNews,
          },
          {
            role: 'user',
            content: prompt,
          },
        ],
        model: this.OPENAI_MODEL,
        temperature: 0.7,
        max_tokens: 2000,
        presence_penalty: 0.6,
        frequency_penalty: 0.4,
        top_p: 0.9,
      });

      const answerContent = completion.choices[0]?.message?.content || '';

      return answerContent;
    } catch (error) {
      this.logger.error(
        `[OpenAI] L·ªói khi chat v·ªõi prompt: ${error.message}`,
        error.stack,
      );
      throw new Error(`OpenAI Chat Error: ${error.message}`);
    }
  }

  async chat(chatRequest: ChatRequestDto): Promise<ChatResponseDto> {
    try {
      this.logger.log('[RAG] B·∫Øt ƒë·∫ßu x·ª≠ l√Ω chat request');
      let sessionId = chatRequest.sessionId;
      if (!sessionId) {
        sessionId = this.createNewSession();
        this.logger.log('[RAG] T·∫°o session m·ªõi:', sessionId);
      }
      let context = this.chatSessions.get(sessionId) || [];
      if (context.length === 0) {
        context = [
          {
            role: ChatRole.SYSTEM,
            content: this.defaultSystemPrompt,
            timestamp: new Date(),
          },
        ];
        this.logger.log('[RAG] Kh·ªüi t·∫°o context m·ªõi cho session');
      }

      const latestMessage =
        chatRequest.messages[chatRequest.messages.length - 1];
      this.logger.log(`[RAG] C√¢u h·ªèi m·ªõi nh·∫•t: ${latestMessage.content}`);

      context = context.filter((msg) => {
        if (msg.role === ChatRole.USER || msg.role === ChatRole.ASSISTANT)
          return true;
        if (
          msg.role === ChatRole.SYSTEM &&
          msg.content === this.defaultSystemPrompt
        )
          return true;
        return false;
      });

      let retrievalContext: { context: string, suggestionQuery: string[] } | null = null;
      if (latestMessage.role === ChatRole.USER) {
        retrievalContext = await this.findRelevantContext(
          latestMessage.content,
        );
        this.logger.log(`[RAG] RAG Context finally: ${retrievalContext}`);

        // Ki·ªÉm tra n·∫øu context ch·ª©a th√¥ng b√°o v·ªÅ vi·ªác kh√¥ng li√™n quan ƒë·∫øn ch·ª©ng kho√°n
        const notRelatedToFinance = retrievalContext.context.includes('Kh√¥ng t√¨m th·∫•y th√¥ng tin li√™n quan trong c∆° s·ªü d·ªØ li·ªáu ch·ª©ng kho√°n');

        if (
          retrievalContext &&
          !notRelatedToFinance &&
          retrievalContext.context !== 'Kh√¥ng t√¨m th·∫•y th√¥ng tin li√™n quan.'
        ) {
          context.push({
            role: ChatRole.SYSTEM,
            content: `Th√¥ng tin truy xu·∫•t:\n${retrievalContext.context}`,
            timestamp: new Date(),
          });
        } else if (notRelatedToFinance) {
          // Th√™m h∆∞·ªõng d·∫´n cho AI khi c√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn t√†i ch√≠nh/ch·ª©ng kho√°n
          context.push({
            role: ChatRole.SYSTEM,
            content: `C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng kh√¥ng li√™n quan ƒë·∫øn lƒ©nh v·ª±c t√†i ch√≠nh, ch·ª©ng kho√°n ho·∫∑c ZenAI. 
            H√£y tr·∫£ l·ªùi m·ªôt c√°ch th√¢n thi·ªán v√† h·ªØu √≠ch, nh∆∞ng nh·∫Øc nh·ªü ng∆∞·ªùi d√πng r·∫±ng b·∫°n l√† ZenAI - tr·ª£ l√Ω t√†i ch√≠nh th√¥ng minh, 
            chuy√™n v·ªÅ t√†i ch√≠nh, ch·ª©ng kho√°n v√† c√°c d·ªãch v·ª• c·ªßa ZenAI. 
            N·∫øu c√≥ th·ªÉ, h√£y h∆∞·ªõng cu·ªôc tr√≤ chuy·ªán v·ªÅ c√°c ch·ªß ƒë·ªÅ li√™n quan ƒë·∫øn t√†i ch√≠nh.`,
            timestamp: new Date(),
          });
        }
      }

      /* Th√™m c√°c message t·ª´ chatRequest v√†o context */
      chatRequest.messages.forEach((msg) => {
        context.push({ ...msg, timestamp: new Date() });
      });

      /* Chuy·ªÉn ƒë·ªïi context th√†nh ƒë·ªãnh d·∫°ng message cho OpenAI */
      const openaiMessages: ChatCompletionMessageParam[] = context.map(
        (msg) => ({
          role: this.mapRole(msg.role),
          content: this.formatMessage(msg.content, msg.role),
          name: msg.role === ChatRole.ASSISTANT ? 'assistant' : undefined,
        }),
      );

      this.logger.log(
        `[RAG] G·ª≠i ${openaiMessages.length} message(s) t·ªõi OpenAI v·ªõi model ${this.OPENAI_MODEL}`,
      );
      this.logger.debug(
        `[OpenAI API] Context messages (${openaiMessages.length}) cu·ªëi c√πng g·ª≠i ƒëi: ${JSON.stringify(openaiMessages)}`,
      );
      const completion = await this.openai.chat.completions.create({
        messages: openaiMessages,
        model: this.OPENAI_MODEL,
        temperature: 0.7,
        max_tokens: 2000,
        presence_penalty: 0.6,
        frequency_penalty: 0.4,
        top_p: 0.9,
      });

      const answerContent = completion.choices[0]?.message?.content || '';
      const response: ChatResponseDto = {
        content: this.formatResponse(answerContent),
        role: ChatRole.ASSISTANT,
        timestamp: new Date(),
        sessionId,
        suggestionQuery: retrievalContext.suggestionQuery,
      };

      context.push({
        role: ChatRole.ASSISTANT,
        content: response.content,
        timestamp: new Date(),
      });
      this.chatSessions.set(sessionId, context);

      this.logger.log('[RAG] K·∫øt th√∫c x·ª≠ l√Ω chat request');
      return response;
    } catch (error) {
      this.logger.error(`[RAG] L·ªói x·ª≠ l√Ω chat: ${error.message}`, error.stack);
      throw new Error(`OpenAI Chat Error: ${error.message}`);
    }
  }

  private mapRole(role: ChatRole): 'system' | 'user' | 'assistant' {
    switch (role) {
      case ChatRole.USER:
        return 'user';
      case ChatRole.ASSISTANT:
        return 'assistant';
      case ChatRole.SYSTEM:
        return 'system';
      case ChatRole.ADMIN:
        return 'user';
      default:
        return 'user';
    }
  }

  private formatMessage(content: string, role: ChatRole): string {
    switch (role) {
      case ChatRole.USER:
        return `Ng∆∞·ªùi d√πng h·ªèi: ${content}`;
      case ChatRole.ADMIN:
        return `Y√™u c·∫ßu ph√¢n t√≠ch chuy√™n s√¢u: ${content}`;
      default:
        return content;
    }
  }

  private formatResponse(content: string): string {
    return content
      .trim()
      .replace(/\n{3,}/g, '\n\n')
      .replace(/^/, 'üìä ')
      .replace(/\n## /g, '\nüí° ')
      .replace(/\n# /g, '\nüéØ ');
  }

  deleteSession(sessionId: string): void {
    this.chatSessions.delete(sessionId);
  }

  getChatHistory(sessionId: string): ChatMessageDto[] | null {
    return this.chatSessions.get(sessionId) || null;
  }
}
